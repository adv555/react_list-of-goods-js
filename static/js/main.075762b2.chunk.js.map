{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_FIELD_ALPHABETICALLY","SORT_FIELD_BY_LENGTH","SORT_REVERSE","sortButtons","name","type","style","App","useState","sortField","setSortField","isReversed","setIsReversed","visibleGoods","goods","sortType","preparedGoods","sort","good1","good2","localeCompare","length","reverse","getPreparedGoods","className","map","cn","onClick","handleSort","good","ReactDOM","render","document","getElementById"],"mappings":"iPAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAA4B,iBAC5BC,EAAuB,SACvBC,EAAe,UAEfC,EAAc,CAClB,CACEC,KAAM,sBACNC,KAAML,EACNM,MAAO,WAET,CACEF,KAAM,iBACNC,KAAMJ,EACNK,MAAO,cAET,CACEF,KAAM,UACNC,KAAMH,EACNI,MAAO,eAsBJ,IAAMC,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAEMC,EAtBR,SAA0BC,EAAOC,EAAUJ,GACzC,IAAMK,EAAa,YAAOF,GAc1B,OAZIC,IAAaf,GACfgB,EAAcC,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAME,cAAcD,MAGvDJ,IAAad,GACfe,EAAcC,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMG,OAASF,EAAME,UAGxDV,GACFK,EAAcM,UAGTN,EAOcO,CACnBxB,EAAiBU,EAAWE,GAgB9B,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACGrB,EAAYsB,KAAI,gBAAGrB,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAMC,EAAf,EAAeA,MAAf,OACf,wBAEED,KAAK,SACLmB,UAAWE,IAAG,SAAUpB,EAAO,CAC7B,WAAYD,IAASH,GAChBS,EACDN,IAASI,IAEfkB,QAAS,kBAzBA,SAACtB,GACdA,IAASH,EACXU,GAAeD,GAEfD,EAAaL,GAqBQuB,CAAWvB,IAR5B,SAUGD,GATIC,OAaPI,GAAaE,IACb,wBACEN,KAAK,SACLmB,UAAU,4BACVG,QA3BU,WAClBjB,EAAa,IACbE,GAAc,IAsBR,sBAWJ,6BACGC,EAAaY,KAAI,SAAAI,GAAI,OACpB,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,YC5GnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.075762b2.chunk.js","sourcesContent":["import { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_FIELD_ALPHABETICALLY = 'alphabetically';\nconst SORT_FIELD_BY_LENGTH = 'length';\nconst SORT_REVERSE = 'reverse';\n\nconst sortButtons = [\n  {\n    name: 'Sort alphabetically',\n    type: SORT_FIELD_ALPHABETICALLY,\n    style: 'is-info',\n  },\n  {\n    name: 'Sort by length',\n    type: SORT_FIELD_BY_LENGTH,\n    style: 'is-success',\n  },\n  {\n    name: 'Reverse',\n    type: SORT_REVERSE,\n    style: 'is-warning',\n  },\n];\n\nfunction getPreparedGoods(goods, sortType, isReversed) {\n  const preparedGoods = [...goods];\n\n  if (sortType === SORT_FIELD_ALPHABETICALLY) {\n    preparedGoods.sort((good1, good2) => good1.localeCompare(good2));\n  }\n\n  if (sortType === SORT_FIELD_BY_LENGTH) {\n    preparedGoods.sort((good1, good2) => good1.length - good2.length);\n  }\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [isReversed, setIsReversed] = useState(false);\n\n  const visibleGoods = getPreparedGoods(\n    goodsFromServer, sortField, isReversed,\n  );\n\n  const handleSort = (type) => {\n    if (type === SORT_REVERSE) {\n      setIsReversed(!isReversed);\n    } else {\n      setSortField(type);\n    }\n  };\n\n  const handleReset = () => {\n    setSortField('');\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        {sortButtons.map(({ name, type, style }) => (\n          <button\n            key={type}\n            type=\"button\"\n            className={cn('button', style, {\n              'is-light': type === SORT_REVERSE\n                ? !isReversed\n                : type !== sortField,\n            })}\n            onClick={() => handleSort(type)}\n          >\n            {name}\n          </button>\n        ))}\n\n        {(sortField || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={handleReset}\n          >\n            Reset\n          </button>\n        )}\n\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li key={good} data-cy=\"Good\">{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}